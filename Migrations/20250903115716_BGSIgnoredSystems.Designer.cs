// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ODEliteTracker.Database;

#nullable disable

namespace ODEliteTracker.Migrations
{
    [DbContext(typeof(ODEliteTrackerDbContext))]
    [Migration("20250903115716_BGSIgnoredSystems")]
    partial class BGSIgnoredSystems
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("ODEliteTracker.Database.DTOs.BGSIgnoredSystemsDTO", b =>
                {
                    b.Property<long>("SystemAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SystemAddress");

                    b.ToTable("BGSIgnoredSystems");
                });

            modelBuilder.Entity("ODEliteTracker.Database.DTOs.BGSTickData", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    b.Property<bool>("ManualTick")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Time")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Updated_At")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TickData");
                });

            modelBuilder.Entity("ODEliteTracker.Database.DTOs.BookMarkDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("BodyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BodyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BodyNameLocal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BookmarkName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<long>("SystemAddress")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SystemAddress");

                    b.ToTable("BookMarkDTO");
                });

            modelBuilder.Entity("ODEliteTracker.Database.DTOs.DepotShoppingListDTO", b =>
                {
                    b.Property<long>("MarketID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SystemAddress")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StationName")
                        .HasColumnType("TEXT");

                    b.HasKey("MarketID", "SystemAddress", "StationName");

                    b.ToTable("DepotShoppingList");
                });

            modelBuilder.Entity("ODEliteTracker.Database.DTOs.IgnoredBounties", b =>
                {
                    b.Property<int>("CommanderID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FactionName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BeforeDate")
                        .HasColumnType("TEXT");

                    b.HasKey("CommanderID", "FactionName");

                    b.ToTable("IgnoredBounties");
                });

            modelBuilder.Entity("ODEliteTracker.Database.DTOs.InactiveDepotsDTO", b =>
                {
                    b.Property<long>("MarketID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SystemAddress")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StationName")
                        .HasColumnType("TEXT");

                    b.HasKey("MarketID", "SystemAddress", "StationName");

                    b.ToTable("InactiveDepots");
                });

            modelBuilder.Entity("ODEliteTracker.Database.DTOs.SpanshCsvDTO", b =>
                {
                    b.Property<int>("CsvType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommanderID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CsvType", "CommanderID");

                    b.ToTable("SpanshCsvs");
                });

            modelBuilder.Entity("ODEliteTracker.Database.DTOs.SystemBookmarkDTO", b =>
                {
                    b.Property<long>("Address")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.Property<double>("Z")
                        .HasColumnType("REAL");

                    b.HasKey("Address");

                    b.ToTable("SystemBookmarks");
                });

            modelBuilder.Entity("ODEliteTracker.Database.DTOs.WatchedMarketDTO", b =>
                {
                    b.Property<ulong>("MarketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CommoditiesJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("MarketID");

                    b.ToTable("WatchedMarkets");
                });

            modelBuilder.Entity("ODJournalDatabase.Database.DTOs.JournalCommanderDTO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JournalDir")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastFile")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseCAPI")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("JournalCommanders");
                });

            modelBuilder.Entity("ODJournalDatabase.Database.DTOs.JournalEntryDTO", b =>
                {
                    b.Property<string>("Filename")
                        .HasColumnType("TEXT");

                    b.Property<long>("Offset")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommanderID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventData")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Filename", "Offset");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("TimeStamp", "Offset");

                    b.ToTable("JournalEntries");
                });

            modelBuilder.Entity("ODJournalDatabase.Database.DTOs.SettingsDTO", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<double?>("DoubleValue")
                        .HasColumnType("REAL");

                    b.Property<int?>("IntValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StringValue")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ODEliteTracker.Database.DTOs.BookMarkDTO", b =>
                {
                    b.HasOne("ODEliteTracker.Database.DTOs.SystemBookmarkDTO", null)
                        .WithMany("Bookmarks")
                        .HasForeignKey("SystemAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SystemAddress");
                });

            modelBuilder.Entity("ODEliteTracker.Database.DTOs.SystemBookmarkDTO", b =>
                {
                    b.Navigation("Bookmarks");
                });
#pragma warning restore 612, 618
        }
    }
}
